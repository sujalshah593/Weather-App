<div
        className={`min-h-screen bg-gradient-to-br ${getWeatherGradient(
          WData.weather[0].main
        )} relative overflow-hidden`}
      >
        {/* Background Glow Effects */}
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute -top-40 -right-40 w-80 h-80 bg-white/10 rounded-full blur-3xl animate-pulse"></div>
          <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-white/10 rounded-full blur-3xl animate-pulse delay-1000"></div>
          <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-white/5 rounded-full blur-3xl animate-pulse delay-500"></div>
        </div>

        <div className="relative z-10 p-4 max-w-7xl mx-auto">
          {/* Header */}
          <div className="text-center py-8 mb-8">
            <h1 className="text-6xl font-bold text-white mb-4 drop-shadow-2xl">
              Weather<span className="text-yellow-300">Pro</span>
            </h1>
            <p className="text-xl text-white/80">
              Beautiful weather forecasting
            </p>
          </div>

          {/* Search */}
          <div className="mb-8 p-6 rounded-2xl bg-white/20 backdrop-blur-xl border border-white/30 shadow-2xl">
            <div className="flex gap-3">
              <div className="relative flex-1">
                <Search className="absolute left-4 top-1/2 -translate-y-1/2 text-white/70 h-5 w-5" />
                <input
                  value={location}
                  onChange={(e) => setLocation(e.target.value)}
                  onKeyDown={(e) => e.key === "Enter" && handlePlaceSearch()}
                  placeholder="Search for any city..."
                  className="w-full pl-12 h-14 text-lg rounded-xl bg-white/20 border border-white/30 text-white placeholder:text-white/70 focus:bg-white/30 focus:border-white/50 outline-none transition-all"
                />
              </div>
              <button
                onClick={handlePlaceSearch}
                disabled={loading || !location.trim()}
                className="h-14 px-6 rounded-xl bg-white/20 hover:bg-white/30 border border-white/30 text-white font-semibold transition-all hover:scale-105 disabled:opacity-50"
              >
                {loading ? (
                  <Loader2 className="h-5 w-5 animate-spin" />
                ) : (
                  <Search className="h-5 w-5" />
                )}
              </button>
            </div>
            {error && (
              <div className="mt-4 p-4 bg-red-500/20 border border-red-400/30 rounded-xl">
                <p className="text-white font-medium">{error}</p>
              </div>
            )}
          </div>

          {/* Current Weather */}
          <div className="mb-8 p-8 rounded-2xl bg-white/20 backdrop-blur-xl border border-white/30 shadow-2xl">
            <div className="flex items-center justify-between mb-8">
              <div className="flex items-center gap-3">
                <MapPin className="h-6 w-6 text-white/80" />
                <h2 className="text-3xl font-bold text-white">
                  {WData.place}, {WData.country}
                </h2>
              </div>
              <div className="flex items-center gap-2 text-white/70 text-sm">
                <RefreshCw className="h-4 w-4" /> Updated{" "}
                {lastUpdate.toLocaleTimeString()}
              </div>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
              {/* Temperature */}
              <div className="text-center">
                <div className="mb-6">
                  {getWeatherIcon(WData.weather[0].main)}
                </div>
                <div className="mb-4">
                  <span className="text-8xl font-bold text-white">
                    {Math.round(WData.main.temp)}째
                  </span>
                </div>
                <p className="text-2xl text-white/90 capitalize">
                  {WData.weather[0].description}
                </p>
                <div className="flex justify-center gap-4 mt-4 text-white/80">
                  <span>H: {Math.round(WData.main.temp_max)}째</span>
                  <span>L: {Math.round(WData.main.temp_min)}째</span>
                </div>
              </div>

              {/* Stats */}
              <div className="grid grid-cols-2 gap-4">
                {[
                  {
                    icon: <Thermometer className="h-6 w-6 text-red-300" />,
                    label: "Feels Like",
                    value: `${Math.round(WData.main.feels_like)}째`,
                  },
                  {
                    icon: <Droplets className="h-6 w-6 text-blue-300" />,
                    label: "Humidity",
                    value: `${WData.main.humidity}%`,
                  },
                  {
                    icon: <Wind className="h-6 w-6 text-green-300" />,
                    label: "Wind",
                    value: `${WData.wind.speed} m/s`,
                  },
                  {
                    icon: <Eye className="h-6 w-6 text-purple-300" />,
                    label: "Visibility",
                    value: `${WData.visibility} km`,
                  },
                ].map((stat, i) => (
                  <div
                    key={i}
                    className="p-6 rounded-2xl bg-white/20 hover:bg-white/30 backdrop-blur-sm transition-all hover:scale-105"
                  >
                    <div className="flex items-center gap-3 mb-2">
                      {stat.icon}
                      <span className="text-white/80 font-medium">
                        {stat.label}
                      </span>
                    </div>
                    <span className="text-2xl font-bold text-white">
                      {stat.value}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </div>

           <div>
          {/* Alerts */}
          {alerts.length > 0 && (
            <div className="mb-8">
              <WeatherAlerts alerts={alerts} />
            </div>
          )}
          </div>     

          {/* Forecast */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="col-span-1 bg-white/20 p-6 rounded-2xl backdrop-blur-xl border border-white/30">
              <h3 className="text-xl text-white font-bold mb-4">Hourly</h3>
              <HourForecast data={fData} />
            </div>
            <div className="col-span-1 bg-white/20 p-6 rounded-2xl backdrop-blur-xl border border-white/30">
              <h3 className="text-xl text-white font-bold mb-4">7-Day</h3>
              <AllDayForecast data={DailyForecast} />
            </div>
          </div>
        </div>
      </div>